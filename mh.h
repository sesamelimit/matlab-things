#include <iostream>
double** dyn_array(size_t rows, size_t columns);
void dyn_array_destroy(double** M,size_t rows);
void print_matrix(double **M, size_t rows, size_t columns);
double** multMatrix(double lambda, double** M, size_t rows, size_t columns);
double* multvector(double lambda, double *x, size_t n);
double** plusMatrix(double** A, double** B, size_t rows, size_t columns);
double** minusMatrix(double** A, double** B, size_t rows, size_t columns);
double** multMatrix(double** A, double** B, size_t rowsA, size_t columnsA, size_t columnsB);
double& maximumMatrix(double** M, size_t rows, size_t columns);
double& minmaxMatrix(double** M, size_t rows, size_t columns);
void mixMatrix(double** M, size_t rows, size_t columns, size_t K_1, size_t K_2);
void localMinimum(double** M, size_t rows, size_t columns);
double det(double** M, size_t size);
double det_gauss(double ** M, size_t size);
double** inv(double** M, size_t size);
double matrix_norm(double **M,size_t size, bool type);
double vector_norm(double**x1,double **x2,size_t size);
double** E_min_muA(double mu, double **A, size_t n);
void Bx_plus_—Å(double** B, double **x1, double **x2, double **c, size_t n);
bool matrix_pos_def(double **A, size_t n);
void A_t_A(double**A, size_t n);
void copy(double **x1,double **x2, size_t size);